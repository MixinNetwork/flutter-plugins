// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/mixin_logger.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class MixinLoggerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MixinLoggerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MixinLoggerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int mixin_logger_init(
    ffi.Pointer<ffi.Char> dir,
    int max_file_size,
    int max_file_count,
    ffi.Pointer<ffi.Char> file_leading,
  ) {
    return _mixin_logger_init(
      dir,
      max_file_size,
      max_file_count,
      file_leading,
    );
  }

  late final _mixin_logger_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<ffi.Char>, ffi.IntPtr, ffi.IntPtr,
              ffi.Pointer<ffi.Char>)>>('mixin_logger_init');
  late final _mixin_logger_init = _mixin_logger_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int mixin_logger_set_file_leading(
    ffi.Pointer<ffi.Char> file_leading,
  ) {
    return _mixin_logger_set_file_leading(
      file_leading,
    );
  }

  late final _mixin_logger_set_file_leadingPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Char>)>>(
          'mixin_logger_set_file_leading');
  late final _mixin_logger_set_file_leading = _mixin_logger_set_file_leadingPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mixin_logger_write_log(
    ffi.Pointer<ffi.Char> log,
  ) {
    return _mixin_logger_write_log(
      log,
    );
  }

  late final _mixin_logger_write_logPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Char>)>>(
          'mixin_logger_write_log');
  late final _mixin_logger_write_log = _mixin_logger_write_logPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();
}
