// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/mixin_logger.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class MixinLoggerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MixinLoggerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MixinLoggerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void MixinLoggerInit(
    ffi.Pointer<ffi.Char> dir,
    int maxFileSize,
    int maxFileCount,
    ffi.Pointer<ffi.Char> fileLeading,
  ) {
    return _MixinLoggerInit(
      dir,
      maxFileSize,
      maxFileCount,
      fileLeading,
    );
  }

  late final _MixinLoggerInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, GoInt64, GoInt,
              ffi.Pointer<ffi.Char>)>>('MixinLoggerInit');
  late final _MixinLoggerInit = _MixinLoggerInitPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  void MixinLoggerWriteLog(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _MixinLoggerWriteLog(
      str,
    );
  }

  late final _MixinLoggerWriteLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'MixinLoggerWriteLog');
  late final _MixinLoggerWriteLog = _MixinLoggerWriteLogPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>)>();
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
