// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/breakpad_client.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class BreakpadClientBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BreakpadClientBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BreakpadClientBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void breakpad_client_set_logger(
    CustomLogger logger,
  ) {
    return _breakpad_client_set_logger(
      logger,
    );
  }

  late final _breakpad_client_set_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CustomLogger)>>(
          'breakpad_client_set_logger');
  late final _breakpad_client_set_logger =
      _breakpad_client_set_loggerPtr.asFunction<void Function(CustomLogger)>();

  int breakpad_client_init_exception_handler(
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _breakpad_client_init_exception_handler(
      dir,
    );
  }

  late final _breakpad_client_init_exception_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'breakpad_client_init_exception_handler');
  late final _breakpad_client_init_exception_handler =
      _breakpad_client_init_exception_handlerPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();
}

typedef CustomLogger = ffi.Pointer<ffi.NativeFunction<CustomLoggerFunction>>;
typedef CustomLoggerFunction = ffi.Void Function(ffi.Pointer<ffi.Char> str);
typedef DartCustomLoggerFunction = void Function(ffi.Pointer<ffi.Char> str);
