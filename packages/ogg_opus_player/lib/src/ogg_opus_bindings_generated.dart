// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/ogg_opus_player.h`, `src/ogg_opus_recorder.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class OggOpusBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OggOpusBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OggOpusBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> ogg_opus_player_create(
    ffi.Pointer<ffi.Int8> file_path,
    int send_port,
  ) {
    return _ogg_opus_player_create(
      file_path,
      send_port,
    );
  }

  late final _ogg_opus_player_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int64)>>('ogg_opus_player_create');
  late final _ogg_opus_player_create = _ogg_opus_player_createPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Int8>, int)>();

  void ogg_opus_player_pause(
    ffi.Pointer<ffi.Void> player,
  ) {
    return _ogg_opus_player_pause(
      player,
    );
  }

  late final _ogg_opus_player_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_player_pause');
  late final _ogg_opus_player_pause = _ogg_opus_player_pausePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_player_play(
    ffi.Pointer<ffi.Void> player,
  ) {
    return _ogg_opus_player_play(
      player,
    );
  }

  late final _ogg_opus_player_playPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_player_play');
  late final _ogg_opus_player_play = _ogg_opus_player_playPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_player_dispose(
    ffi.Pointer<ffi.Void> player,
  ) {
    return _ogg_opus_player_dispose(
      player,
    );
  }

  late final _ogg_opus_player_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_player_dispose');
  late final _ogg_opus_player_dispose = _ogg_opus_player_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  double ogg_opus_player_get_current_time(
    ffi.Pointer<ffi.Void> player,
  ) {
    return _ogg_opus_player_get_current_time(
      player,
    );
  }

  late final _ogg_opus_player_get_current_timePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_player_get_current_time');
  late final _ogg_opus_player_get_current_time =
      _ogg_opus_player_get_current_timePtr
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_player_initialize_dart(
    ffi.Pointer<ffi.Void> native_port,
  ) {
    return _ogg_opus_player_initialize_dart(
      native_port,
    );
  }

  late final _ogg_opus_player_initialize_dartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_player_initialize_dart');
  late final _ogg_opus_player_initialize_dart =
      _ogg_opus_player_initialize_dartPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ogg_opus_recorder_create(
    ffi.Pointer<ffi.Int8> file_path,
    int send_port,
  ) {
    return _ogg_opus_recorder_create(
      file_path,
      send_port,
    );
  }

  late final _ogg_opus_recorder_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int64)>>('ogg_opus_recorder_create');
  late final _ogg_opus_recorder_create = _ogg_opus_recorder_createPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Int8>, int)>();

  void ogg_opus_recorder_start(
    ffi.Pointer<ffi.Void> recoder,
  ) {
    return _ogg_opus_recorder_start(
      recoder,
    );
  }

  late final _ogg_opus_recorder_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_recorder_start');
  late final _ogg_opus_recorder_start = _ogg_opus_recorder_startPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_recorder_stop(
    ffi.Pointer<ffi.Void> recoder,
  ) {
    return _ogg_opus_recorder_stop(
      recoder,
    );
  }

  late final _ogg_opus_recorder_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_recorder_stop');
  late final _ogg_opus_recorder_stop = _ogg_opus_recorder_stopPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_recorder_destroy(
    ffi.Pointer<ffi.Void> recoder,
  ) {
    return _ogg_opus_recorder_destroy(
      recoder,
    );
  }

  late final _ogg_opus_recorder_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_recorder_destroy');
  late final _ogg_opus_recorder_destroy = _ogg_opus_recorder_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ogg_opus_recorder_get_wave_data(
    ffi.Pointer<ffi.Void> recoder,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> wave_data,
    ffi.Pointer<ffi.Int64> wave_data_length,
  ) {
    return _ogg_opus_recorder_get_wave_data(
      recoder,
      wave_data,
      wave_data_length,
    );
  }

  late final _ogg_opus_recorder_get_wave_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int64>)>>('ogg_opus_recorder_get_wave_data');
  late final _ogg_opus_recorder_get_wave_data =
      _ogg_opus_recorder_get_wave_dataPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Int64>)>();

  double ogg_opus_recorder_get_duration(
    ffi.Pointer<ffi.Void> recoder,
  ) {
    return _ogg_opus_recorder_get_duration(
      recoder,
    );
  }

  late final _ogg_opus_recorder_get_durationPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
          'ogg_opus_recorder_get_duration');
  late final _ogg_opus_recorder_get_duration =
      _ogg_opus_recorder_get_durationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();
}
